"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsonwebtoken_1 = __importDefault(require("jsonwebtoken"));
const Prisma_1 = global[Symbol.for('ioc.use')]("Adonis/Addons/Prisma");
const Config_1 = __importDefault(global[Symbol.for('ioc.use')]("Adonis/Core/Config"));
class JwtMiddleware {
    async handle({ auth, request, response }, next) {
        const bearerToken = request.header('authorization');
        let partes = bearerToken?.split(' ') || [];
        if (bearerToken) {
            if (partes.length !== 2) {
                return response.status(401).json({
                    message: 'El token enviado es inv치lido',
                });
            }
            else {
                if (partes[0].toLowerCase() !== 'bearer') {
                    return response.status(401).json({
                        message: 'La autenticaci칩n debe estar en formato bearer',
                    });
                }
                else {
                    const token = partes[1];
                    try {
                        const datos = jsonwebtoken_1.default.verify(token, Config_1.default.get('app.appKey'));
                        const usuario = await Prisma_1.prisma.usuario.findFirst({
                            where: {
                                id: datos.id,
                                nombre: datos.nombre,
                                rememberMeToken: token,
                            },
                        });
                        if (usuario) {
                            auth.use('api').user = usuario;
                            return next();
                        }
                        else {
                            return response.status(401).send({
                                message: 'Debe iniciar sesi칩n',
                            });
                        }
                    }
                    catch (err) {
                        if (err.name == 'TokenExpiredError') {
                            return response.status(401).json({
                                message: 'Sesi칩n expirada',
                            });
                        }
                        else {
                            return response.status(401).json({
                                message: 'Acceso no autorizado',
                            });
                        }
                    }
                }
            }
        }
        else {
            return response.status(401).json({
                message: 'Acceso no autorizado',
            });
        }
    }
}
exports.default = JwtMiddleware;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSnd0TWlkZGxld2FyZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIkp3dE1pZGRsZXdhcmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFDQSxnRUFBOEI7QUFDOUIsdUVBQWtEO0FBQ2xELHNGQUE0QztBQVM1QyxNQUFxQixhQUFhO0lBQ3pCLEtBQUssQ0FBQyxNQUFNLENBQUMsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBdUIsRUFBRSxJQUF5QjtRQUM3RixNQUFNLFdBQVcsR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLGVBQWUsQ0FBQyxDQUFBO1FBQ25ELElBQUksTUFBTSxHQUFHLFdBQVcsRUFBRSxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxDQUFBO1FBQzFDLElBQUksV0FBVyxFQUFFO1lBQ2YsSUFBSSxNQUFNLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtnQkFDdkIsT0FBTyxRQUFRLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQztvQkFDL0IsT0FBTyxFQUFFLDhCQUE4QjtpQkFDeEMsQ0FBQyxDQUFBO2FBQ0g7aUJBQU07Z0JBQ0wsSUFBSSxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFLEtBQUssUUFBUSxFQUFFO29CQUN4QyxPQUFPLFFBQVEsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDO3dCQUMvQixPQUFPLEVBQUUsK0NBQStDO3FCQUN6RCxDQUFDLENBQUE7aUJBQ0g7cUJBQU07b0JBQ0wsTUFBTSxLQUFLLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFBO29CQUN2QixJQUFJO3dCQUNGLE1BQU0sS0FBSyxHQUFhLHNCQUFHLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxnQkFBTSxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFBO3dCQUNuRSxNQUFNLE9BQU8sR0FBRyxNQUFNLGVBQU0sQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDOzRCQUM3QyxLQUFLLEVBQUU7Z0NBQ0wsRUFBRSxFQUFFLEtBQUssQ0FBQyxFQUFFO2dDQUNaLE1BQU0sRUFBRSxLQUFLLENBQUMsTUFBTTtnQ0FDcEIsZUFBZSxFQUFFLEtBQUs7NkJBQ3ZCO3lCQUNGLENBQUMsQ0FBQTt3QkFDRixJQUFJLE9BQU8sRUFBRTs0QkFDWCxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksR0FBRyxPQUFPLENBQUE7NEJBQzlCLE9BQU8sSUFBSSxFQUFFLENBQUE7eUJBQ2Q7NkJBQU07NEJBQ0wsT0FBTyxRQUFRLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQztnQ0FDL0IsT0FBTyxFQUFFLHFCQUFxQjs2QkFDL0IsQ0FBQyxDQUFBO3lCQUNIO3FCQUNGO29CQUFDLE9BQU0sR0FBRyxFQUFFO3dCQUNYLElBQUksR0FBRyxDQUFDLElBQUksSUFBSSxtQkFBbUIsRUFBRTs0QkFDbkMsT0FBTyxRQUFRLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQztnQ0FDL0IsT0FBTyxFQUFFLGlCQUFpQjs2QkFDM0IsQ0FBQyxDQUFBO3lCQUNIOzZCQUFNOzRCQUNMLE9BQU8sUUFBUSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUM7Z0NBQy9CLE9BQU8sRUFBRSxzQkFBc0I7NkJBQ2hDLENBQUMsQ0FBQTt5QkFDSDtxQkFDRjtpQkFDRjthQUNGO1NBQ0Y7YUFBTTtZQUNMLE9BQU8sUUFBUSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUM7Z0JBQy9CLE9BQU8sRUFBRSxzQkFBc0I7YUFDaEMsQ0FBQyxDQUFBO1NBQ0g7SUFDSCxDQUFDO0NBQ0Y7QUFwREQsZ0NBb0RDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBIdHRwQ29udGV4dENvbnRyYWN0IH0gZnJvbSAnQGlvYzpBZG9uaXMvQ29yZS9IdHRwQ29udGV4dCdcbmltcG9ydCBqd3QgZnJvbSAnanNvbndlYnRva2VuJ1xuaW1wb3J0IHsgcHJpc21hIH0gZnJvbSAnQGlvYzpBZG9uaXMvQWRkb25zL1ByaXNtYSdcbmltcG9ydCBDb25maWcgZnJvbSAnQGlvYzpBZG9uaXMvQ29yZS9Db25maWcnXG5cbmludGVyZmFjZSBEYXRvc0p3dCBleHRlbmRzIGp3dC5Kd3RQYXlsb2FkIHtcbiAgaWQ6IHN0cmluZ1xuICBub21icmU6IHN0cmluZyxcbiAgaWF0OiBudW1iZXIsXG4gIGV4cDogbnVtYmVyXG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEp3dE1pZGRsZXdhcmUge1xuICBwdWJsaWMgYXN5bmMgaGFuZGxlKHsgYXV0aCwgcmVxdWVzdCwgcmVzcG9uc2UgfTogSHR0cENvbnRleHRDb250cmFjdCwgbmV4dDogKCkgPT4gUHJvbWlzZTx2b2lkPikge1xuICAgIGNvbnN0IGJlYXJlclRva2VuID0gcmVxdWVzdC5oZWFkZXIoJ2F1dGhvcml6YXRpb24nKVxuICAgIGxldCBwYXJ0ZXMgPSBiZWFyZXJUb2tlbj8uc3BsaXQoJyAnKSB8fCBbXVxuICAgIGlmIChiZWFyZXJUb2tlbikge1xuICAgICAgaWYgKHBhcnRlcy5sZW5ndGggIT09IDIpIHtcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlLnN0YXR1cyg0MDEpLmpzb24oe1xuICAgICAgICAgIG1lc3NhZ2U6ICdFbCB0b2tlbiBlbnZpYWRvIGVzIGludsOhbGlkbycsXG4gICAgICAgIH0pXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAocGFydGVzWzBdLnRvTG93ZXJDYXNlKCkgIT09ICdiZWFyZXInKSB7XG4gICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLnN0YXR1cyg0MDEpLmpzb24oe1xuICAgICAgICAgICAgbWVzc2FnZTogJ0xhIGF1dGVudGljYWNpw7NuIGRlYmUgZXN0YXIgZW4gZm9ybWF0byBiZWFyZXInLFxuICAgICAgICAgIH0pXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc3QgdG9rZW4gPSBwYXJ0ZXNbMV1cbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgZGF0b3MgPSA8RGF0b3NKd3Q+and0LnZlcmlmeSh0b2tlbiwgQ29uZmlnLmdldCgnYXBwLmFwcEtleScpKVxuICAgICAgICAgICAgY29uc3QgdXN1YXJpbyA9IGF3YWl0IHByaXNtYS51c3VhcmlvLmZpbmRGaXJzdCh7XG4gICAgICAgICAgICAgIHdoZXJlOiB7XG4gICAgICAgICAgICAgICAgaWQ6IGRhdG9zLmlkLFxuICAgICAgICAgICAgICAgIG5vbWJyZTogZGF0b3Mubm9tYnJlLFxuICAgICAgICAgICAgICAgIHJlbWVtYmVyTWVUb2tlbjogdG9rZW4sXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgaWYgKHVzdWFyaW8pIHtcbiAgICAgICAgICAgICAgYXV0aC51c2UoJ2FwaScpLnVzZXIgPSB1c3VhcmlvXG4gICAgICAgICAgICAgIHJldHVybiBuZXh0KClcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHJldHVybiByZXNwb25zZS5zdGF0dXMoNDAxKS5zZW5kKHtcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiAnRGViZSBpbmljaWFyIHNlc2nDs24nLFxuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gY2F0Y2goZXJyKSB7XG4gICAgICAgICAgICBpZiAoZXJyLm5hbWUgPT0gJ1Rva2VuRXhwaXJlZEVycm9yJykge1xuICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2Uuc3RhdHVzKDQwMSkuanNvbih7XG4gICAgICAgICAgICAgICAgbWVzc2FnZTogJ1Nlc2nDs24gZXhwaXJhZGEnLFxuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLnN0YXR1cyg0MDEpLmpzb24oe1xuICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdBY2Nlc28gbm8gYXV0b3JpemFkbycsXG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiByZXNwb25zZS5zdGF0dXMoNDAxKS5qc29uKHtcbiAgICAgICAgbWVzc2FnZTogJ0FjY2VzbyBubyBhdXRvcml6YWRvJyxcbiAgICAgIH0pXG4gICAgfVxuICB9XG59XG4iXX0=