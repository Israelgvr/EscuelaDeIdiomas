"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Validator_1 = global[Symbol.for('ioc.use')]("Adonis/Core/Validator");
const Prisma_1 = global[Symbol.for('ioc.use')]("Adonis/Addons/Prisma");
const Logger_1 = __importDefault(global[Symbol.for('ioc.use')]("Adonis/Core/Logger"));
class InscripcionesController {
    async index({ request, response }) {
        const pagina = parseInt(request.input('pagina') || 1);
        const porPagina = parseInt(request.input('porPagina') || 8);
        const buscar = request.input('buscar') || '';
        const filtroCurso = request.input('cursoId') || '';
        const filialId = request.input('filialId') || '';
        if (filialId == '') {
            return response.status(422).send({
                message: 'Debe seleccionar una filial',
            });
        }
        if (filtroCurso != '') {
            const [data, total] = await Prisma_1.prisma.$transaction([
                Prisma_1.prisma.inscripcion.findMany({
                    skip: (pagina - 1) * porPagina,
                    take: porPagina,
                    include: {
                        tipoEstudiante: true,
                        traspasoFilial: true,
                        estudiante: {
                            include: {
                                fuerza: true,
                                persona: {
                                    include: {
                                        ciudad: true,
                                        parentesco: true,
                                    },
                                },
                            },
                        },
                        curso: {
                            include: {
                                idioma: true,
                            },
                        },
                    },
                    orderBy: {
                        estudiante: {
                            persona: {
                                nombre: 'asc',
                            }
                        },
                    },
                    where: {
                        curso: {
                            id: filtroCurso,
                        },
                        filial: {
                            id: filialId,
                        },
                        estudiante: {
                            OR: [
                                {
                                    matricula: {
                                        contains: buscar,
                                        mode: 'insensitive',
                                    },
                                }, {
                                    persona: {
                                        OR: [
                                            {
                                                apellidoPaterno: {
                                                    contains: buscar,
                                                    mode: 'insensitive',
                                                },
                                            }, {
                                                apellidoMaterno: {
                                                    contains: buscar,
                                                    mode: 'insensitive',
                                                },
                                            }, {
                                                nombre: {
                                                    contains: buscar,
                                                    mode: 'insensitive',
                                                },
                                            },
                                        ],
                                    },
                                },
                            ],
                        },
                    },
                }),
                Prisma_1.prisma.inscripcion.count({
                    where: {
                        curso: {
                            id: filtroCurso,
                        },
                        filial: {
                            id: filialId,
                        },
                        estudiante: {
                            OR: [
                                {
                                    matricula: {
                                        contains: buscar,
                                        mode: 'insensitive',
                                    },
                                }, {
                                    persona: {
                                        OR: [
                                            {
                                                apellidoPaterno: {
                                                    contains: buscar,
                                                    mode: 'insensitive',
                                                },
                                            }, {
                                                apellidoMaterno: {
                                                    contains: buscar,
                                                    mode: 'insensitive',
                                                },
                                            }, {
                                                nombre: {
                                                    contains: buscar,
                                                    mode: 'insensitive',
                                                },
                                            },
                                        ],
                                    },
                                },
                            ],
                        },
                    },
                })
            ]);
            return response.send({
                message: 'Lista de registros',
                payload: {
                    data: data,
                    meta: {
                        lastPage: Math.ceil(total / porPagina),
                        total: total,
                    }
                },
            });
        }
        else {
            const [data, total] = await Prisma_1.prisma.$transaction([
                Prisma_1.prisma.inscripcion.findMany({
                    skip: (pagina - 1) * porPagina,
                    take: porPagina,
                    include: {
                        tipoEstudiante: true,
                        traspasoFilial: true,
                        estudiante: {
                            include: {
                                fuerza: true,
                                persona: {
                                    include: {
                                        ciudad: true,
                                        parentesco: true,
                                    },
                                },
                            },
                        },
                        curso: {
                            include: {
                                idioma: true,
                            },
                        },
                    },
                    orderBy: {
                        estudiante: {
                            persona: {
                                nombre: 'asc',
                            }
                        },
                    },
                    where: {
                        filial: {
                            id: filialId,
                        },
                        estudiante: {
                            OR: [
                                {
                                    matricula: {
                                        contains: buscar,
                                        mode: 'insensitive',
                                    },
                                }, {
                                    persona: {
                                        OR: [
                                            {
                                                apellidoPaterno: {
                                                    contains: buscar,
                                                    mode: 'insensitive',
                                                },
                                            }, {
                                                apellidoMaterno: {
                                                    contains: buscar,
                                                    mode: 'insensitive',
                                                },
                                            }, {
                                                nombre: {
                                                    contains: buscar,
                                                    mode: 'insensitive',
                                                },
                                            },
                                        ],
                                    },
                                },
                            ],
                        },
                    },
                }),
                Prisma_1.prisma.inscripcion.count({
                    where: {
                        filial: {
                            id: filialId,
                        },
                        estudiante: {
                            OR: [
                                {
                                    matricula: {
                                        contains: buscar,
                                        mode: 'insensitive',
                                    },
                                }, {
                                    persona: {
                                        OR: [
                                            {
                                                apellidoPaterno: {
                                                    contains: buscar,
                                                    mode: 'insensitive',
                                                },
                                            }, {
                                                apellidoMaterno: {
                                                    contains: buscar,
                                                    mode: 'insensitive',
                                                },
                                            }, {
                                                nombre: {
                                                    contains: buscar,
                                                    mode: 'insensitive',
                                                },
                                            },
                                        ],
                                    },
                                },
                            ],
                        },
                    },
                })
            ]);
            return response.send({
                message: 'Lista de registros',
                payload: {
                    data: data,
                    meta: {
                        lastPage: Math.ceil(total / porPagina),
                        total: total,
                    }
                },
            });
        }
    }
    async indexA({ request, response }) {
        const pagina = parseInt(request.input('pagina') || 1);
        const porPagina = parseInt(request.input('porPagina') || 8);
        const buscar = request.input('buscar') || '';
        const [data, total] = await Prisma_1.prisma.$transaction([
            Prisma_1.prisma.inscripcion.findMany({
                skip: (pagina - 1) * porPagina,
                take: porPagina,
                include: {
                    tipoEstudiante: true,
                    filial: true,
                    estudiante: {
                        include: {
                            fuerza: true,
                            persona: {
                                include: {
                                    ciudad: true,
                                    parentesco: true,
                                },
                            },
                        },
                    },
                },
                orderBy: {
                    estudiante: {
                        persona: {
                            apellidoPaterno: 'asc',
                        },
                    },
                },
                where: {
                    cursoId: request.param('cursoId'),
                    estudiante: {
                        persona: {
                            OR: [
                                {
                                    apellidoPaterno: {
                                        contains: buscar,
                                        mode: 'insensitive',
                                    },
                                }, {
                                    apellidoMaterno: {
                                        contains: buscar,
                                        mode: 'insensitive',
                                    },
                                }, {
                                    nombre: {
                                        contains: buscar,
                                        mode: 'insensitive',
                                    },
                                },
                            ],
                        },
                    },
                },
            }),
            Prisma_1.prisma.inscripcion.count({
                where: {
                    cursoId: request.param('cursoId'),
                    estudiante: {
                        persona: {
                            OR: [
                                {
                                    apellidoPaterno: {
                                        contains: buscar,
                                        mode: 'insensitive',
                                    },
                                }, {
                                    apellidoMaterno: {
                                        contains: buscar,
                                        mode: 'insensitive',
                                    },
                                }, {
                                    nombre: {
                                        contains: buscar,
                                        mode: 'insensitive',
                                    },
                                },
                            ],
                        },
                    },
                },
            })
        ]);
        return response.send({
            message: 'Lista de registros',
            payload: {
                data: data,
                meta: {
                    lastPage: Math.ceil(total / porPagina),
                    total: total,
                }
            },
        });
    }
    async store({ request, response }) {
        const payload = await request.validate({
            schema: Validator_1.schema.create({
                deposito: Validator_1.schema.boolean(),
                numeroDeposito: Validator_1.schema.string.nullable([
                    Validator_1.rules.maxLength(255),
                    Validator_1.rules.trim(),
                ]),
                traspaso: Validator_1.schema.boolean(),
                traspasoFilialId: Validator_1.schema.string.nullable([
                    Validator_1.rules.requiredWhen('traspaso', '=', true),
                ]),
                estudianteId: Validator_1.schema.string(),
                tipoEstudianteId: Validator_1.schema.string(),
                descuentoPorcentaje: Validator_1.schema.number([
                    Validator_1.rules.range(0, 100),
                ]),
                filialId: Validator_1.schema.string(),
                cursoId: Validator_1.schema.string(),
            }),
            messages: {
                'filialId.requiredWhen': 'La filial de traspaso es requerida',
            }
        });
        const registro = await Prisma_1.prisma.inscripcion.findFirst({
            where: {
                cursoId: payload.cursoId,
                estudianteId: payload.estudianteId,
            },
        });
        if (registro !== null) {
            return response.status(422).send({
                message: 'Registro duplicado',
                errors: {
                    estudianteId: ['El estudiante ya está inscrito en el curso'],
                },
            });
        }
        try {
            const inscripcion = await Prisma_1.prisma.inscripcion.create({
                data: {
                    deposito: payload.deposito,
                    numeroDeposito: payload.numeroDeposito,
                    traspaso: payload.traspaso,
                    estudiante: {
                        connect: { id: payload.estudianteId },
                    },
                    tipoEstudiante: {
                        connect: { id: payload.tipoEstudianteId },
                    },
                    curso: {
                        connect: { id: payload.cursoId },
                    },
                    descuentoPorcentaje: payload.descuentoPorcentaje,
                    descuento: 0,
                    filial: {
                        connect: { id: payload.filialId },
                    },
                },
            });
            if (payload.traspaso && payload.traspasoFilialId) {
                await Prisma_1.prisma.inscripcion.update({
                    where: {
                        id: inscripcion.id,
                    },
                    data: {
                        traspasoFilial: {
                            connect: { id: payload.traspasoFilialId },
                        },
                    },
                });
            }
            return response.send({
                message: 'Registro almacenado',
                payload: inscripcion,
            });
        }
        catch (err) {
            return response.status(500).send({
                message: 'Error al almacenar el registro',
            });
        }
    }
    async show({ request, response }) {
        try {
            return response.send({
                message: 'Detalle del registro',
                payload: await Prisma_1.prisma.inscripcion.findUniqueOrThrow({
                    where: {
                        id: request.param('inscripcionId'),
                    },
                    include: {
                        tipoEstudiante: true,
                        traspasoFilial: true,
                        estudiante: {
                            include: {
                                fuerza: true,
                                persona: {
                                    include: {
                                        ciudad: true,
                                        parentesco: true,
                                    },
                                },
                            },
                        },
                        curso: {
                            include: {
                                idioma: true,
                                modalidad: true,
                                niveles: {
                                    include: {
                                        libros: {
                                            orderBy: [
                                                { nombre: 'asc' },
                                            ],
                                        },
                                    },
                                },
                            },
                        },
                    },
                }),
            });
        }
        catch (err) {
            Logger_1.default.error(err);
            return response.status(404).send({
                message: 'Registro inexistente',
            });
        }
    }
    async update({ request, response }) {
        if ((await Prisma_1.prisma.inscripcion.count({
            where: {
                id: request.param('inscripcionId'),
            },
        })) !== 1) {
            return response.status(404).send({
                message: 'Registro inexistente',
            });
        }
        const payload = await request.validate({
            schema: Validator_1.schema.create({
                deposito: Validator_1.schema.boolean(),
                numeroDeposito: Validator_1.schema.string.nullable([
                    Validator_1.rules.maxLength(255),
                    Validator_1.rules.trim(),
                ]),
                traspaso: Validator_1.schema.boolean(),
                traspasoFilialId: Validator_1.schema.string.nullable([
                    Validator_1.rules.requiredWhen('traspaso', '=', true),
                ]),
                tipoEstudianteId: Validator_1.schema.string(),
                descuentoPorcentaje: Validator_1.schema.number([
                    Validator_1.rules.range(0, 100),
                ]),
                filialId: Validator_1.schema.string(),
                cursoId: Validator_1.schema.string(),
            }),
            messages: {
                'filialId.requiredWhen': 'La filial de traspaso es requerida',
            }
        });
        try {
            const inscripcion = await Prisma_1.prisma.inscripcion.update({
                where: {
                    id: request.param('inscripcionId'),
                },
                data: {
                    deposito: payload.deposito,
                    numeroDeposito: payload.numeroDeposito,
                    traspaso: payload.traspaso,
                    tipoEstudiante: {
                        connect: { id: payload.tipoEstudianteId },
                    },
                    curso: {
                        connect: { id: payload.cursoId },
                    },
                    descuentoPorcentaje: payload.descuentoPorcentaje,
                    descuento: 0,
                    filial: {
                        connect: { id: payload.filialId },
                    },
                },
            });
            if (payload.traspaso && payload.traspasoFilialId) {
                await Prisma_1.prisma.inscripcion.update({
                    where: {
                        id: inscripcion.id,
                    },
                    data: {
                        traspasoFilial: {
                            connect: { id: payload.traspasoFilialId },
                        },
                    },
                });
            }
            else {
                await Prisma_1.prisma.inscripcion.update({
                    where: {
                        id: inscripcion.id,
                    },
                    data: {
                        traspasoFilial: {
                            disconnect: true,
                        },
                    },
                });
            }
            return response.send({
                message: 'Registro actualizado',
                payload: inscripcion,
            });
        }
        catch (err) {
            Logger_1.default.error(err);
            return response.status(500).send({
                message: 'Error al almacenar el registro',
            });
        }
    }
    async destroy({ request, response }) {
        if ((await Prisma_1.prisma.inscripcion.count({
            where: {
                id: request.param('inscripcionId'),
            },
        })) !== 1) {
            return response.status(404).send({
                message: 'Registro inexistente',
            });
        }
        await Prisma_1.prisma.inscripcion.delete({
            where: {
                id: request.param('inscripcionId'),
            },
        });
        return response.send({
            message: 'Registro eliminado',
        });
    }
    async estudiantes({ request, response }) {
        const filialId = request.input('filialId') || '';
        if (filialId == '') {
            return response.status(422).send({
                message: 'Debe seleccionar una filial',
            });
        }
        const cursoId = request.input('cursoId') || '';
        if (cursoId == '') {
            return response.status(422).send({
                message: 'Debe seleccionar un curso',
            });
        }
        const buscar = request.input('buscar') || '';
        let inscritos = [];
        try {
            const curso = await Prisma_1.prisma.curso.findUniqueOrThrow({
                where: {
                    id: cursoId,
                },
                include: {
                    inscripciones: {
                        where: {
                            estudiante: {
                                matricula: {
                                    not: null
                                },
                            },
                        },
                        include: {
                            estudiante: true,
                        },
                    },
                },
            });
            if (curso.inscripciones.length > 0) {
                inscritos = curso.inscripciones.map(o => o.estudiante.id);
            }
            return response.send({
                message: 'Estudiantes disponibles',
                payload: await Prisma_1.prisma.estudiante.findMany({
                    include: {
                        tipoEstudiante: true,
                        fuerza: true,
                        persona: {
                            include: {
                                ciudad: true,
                                parentesco: true,
                            },
                        },
                    },
                    where: {
                        filial: {
                            id: filialId,
                        },
                        id: {
                            notIn: inscritos,
                        },
                        OR: [
                            {
                                matricula: {
                                    contains: buscar,
                                    mode: 'insensitive',
                                },
                            }, {
                                persona: {
                                    OR: [
                                        {
                                            apellidoPaterno: {
                                                contains: buscar,
                                                mode: 'insensitive',
                                            },
                                        }, {
                                            apellidoMaterno: {
                                                contains: buscar,
                                                mode: 'insensitive',
                                            },
                                        }, {
                                            nombre: {
                                                contains: buscar,
                                                mode: 'insensitive',
                                            },
                                        },
                                    ],
                                },
                            },
                        ],
                    },
                })
            });
        }
        catch (err) {
            Logger_1.default.error(err);
            return response.status(404).send({
                message: 'Registro inexistente',
            });
        }
    }
}
exports.default = InscripcionesController;
//# sourceMappingURL=data:application/json;base64,