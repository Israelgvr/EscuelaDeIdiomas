"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs = __importStar(require("fs"));
const Validator_1 = global[Symbol.for('ioc.use')]("Adonis/Core/Validator");
const Prisma_1 = global[Symbol.for('ioc.use')]("Adonis/Addons/Prisma");
const exceljs_1 = __importDefault(require("exceljs"));
const Logger_1 = __importDefault(global[Symbol.for('ioc.use')]("Adonis/Core/Logger"));
class IdiomasController {
    async index({ request, response }) {
        const pagina = parseInt(request.input('pagina') || 1);
        const porPagina = parseInt(request.input('porPagina') || 8);
        const buscar = request.input('buscar') || '';
        const combo = JSON.parse(request.input('combo') || false);
        const filialId = request.input('filialId') || '';
        if (filialId == '') {
            return response.status(422).send({
                message: 'Debe seleccionar una filial',
            });
        }
        if (combo) {
            return response.send({
                message: 'Lista de registros',
                payload: await Prisma_1.prisma.idioma.findMany({
                    where: {
                        filial: {
                            id: filialId,
                        },
                    },
                    orderBy: [
                        { codigo: 'asc' },
                        { nombre: 'asc' },
                    ],
                    select: {
                        id: true,
                        nombre: true,
                        descripcion: true,
                        codigo: true,
                        imagen: true,
                    },
                }),
            });
        }
        else {
            const [data, total] = await Prisma_1.prisma.$transaction([
                Prisma_1.prisma.idioma.findMany({
                    skip: (pagina - 1) * porPagina,
                    take: porPagina,
                    orderBy: [
                        { codigo: 'asc' },
                        { nombre: 'asc' },
                    ],
                    where: {
                        filial: {
                            id: filialId,
                        },
                        OR: [
                            {
                                nombre: {
                                    contains: buscar,
                                    mode: 'insensitive',
                                },
                            }, {
                                codigo: {
                                    contains: buscar,
                                    mode: 'insensitive',
                                },
                            },
                        ],
                    },
                }),
                Prisma_1.prisma.idioma.count({
                    where: {
                        filial: {
                            id: filialId,
                        },
                        OR: [
                            {
                                nombre: {
                                    contains: buscar,
                                    mode: 'insensitive',
                                },
                            }, {
                                codigo: {
                                    contains: buscar,
                                    mode: 'insensitive',
                                },
                            },
                        ],
                    },
                })
            ]);
            return response.send({
                message: 'Lista de registros',
                payload: {
                    data: data,
                    meta: {
                        lastPage: Math.ceil(total / porPagina),
                        total: total,
                    }
                },
            });
        }
    }
    async store({ request, response }) {
        const payload = await request.validate({
            schema: Validator_1.schema.create({
                nombre: Validator_1.schema.string([
                    Validator_1.rules.maxLength(255),
                    Validator_1.rules.trim(),
                ]),
                codigo: Validator_1.schema.string([
                    Validator_1.rules.maxLength(20),
                    Validator_1.rules.trim(),
                ]),
                resolucionMinisterial: Validator_1.schema.string.nullableAndOptional([
                    Validator_1.rules.maxLength(50),
                    Validator_1.rules.trim(),
                ]),
                imagen: Validator_1.schema.file.nullableAndOptional({
                    size: '2mb',
                    extnames: ['jpg', 'jpeg', 'webp', 'gif', 'png', 'svg', 'JPG', 'JPEG', 'WEBP', 'GIF', 'PNG', 'SVG'],
                }),
                filialId: Validator_1.schema.string(),
                descripcion: Validator_1.schema.string([
                    Validator_1.rules.maxLength(1000),
                    Validator_1.rules.trim(),
                ]),
            }),
        });
        if ((await Prisma_1.prisma.idioma.count({
            where: {
                filial: {
                    id: payload.filialId,
                },
                nombre: {
                    equals: payload.nombre,
                    mode: 'insensitive',
                },
            },
        })) > 0) {
            return response.status(422).send({
                message: 'Registro duplicado',
                errors: {
                    nombre: ['El registro ya existe'],
                },
            });
        }
        if ((await Prisma_1.prisma.idioma.count({
            where: {
                filial: {
                    id: payload.filialId,
                },
                codigo: {
                    equals: payload.codigo,
                    mode: 'insensitive',
                },
            },
        })) > 0) {
            return response.status(422).send({
                message: 'Registro duplicado',
                errors: {
                    codigo: ['El registro ya existe'],
                },
            });
        }
        try {
            let nombreImagen;
            if (payload.imagen) {
                nombreImagen = `${new Date().getTime()}.${payload.imagen.extname}`;
                await payload.imagen.moveToDisk(`./idiomas`, {
                    name: nombreImagen
                });
            }
            else {
                nombreImagen = null;
            }
            return response.send({
                message: 'Registro almacenado',
                payload: await Prisma_1.prisma.idioma.create({
                    data: {
                        nombre: payload.nombre,
                        codigo: payload.codigo,
                        resolucionMinisterial: payload.resolucionMinisterial,
                        imagen: nombreImagen,
                        filial: {
                            connect: { id: payload.filialId },
                        },
                        descripcion: payload.descripcion,
                    },
                }),
            });
        }
        catch (err) {
            Logger_1.default.error(err.message);
            return response.status(500).send({
                message: 'Error al almacenar el registro',
            });
        }
    }
    async show({ request, response }) {
        try {
            return response.send({
                message: 'Detalle del registro',
                payload: await Prisma_1.prisma.idioma.findUniqueOrThrow({
                    where: {
                        id: request.param('id'),
                    },
                }),
            });
        }
        catch (err) {
            Logger_1.default.error(err);
            return response.status(404).send({
                message: 'Registro inexistente',
            });
        }
    }
    async update({ request, response }) {
        let registro;
        try {
            registro = await Prisma_1.prisma.idioma.findUniqueOrThrow({
                where: {
                    id: request.param('id'),
                },
            });
        }
        catch (err) {
            Logger_1.default.error(err);
            return response.status(404).send({
                message: 'Registro inexistente',
            });
        }
        const payload = await request.validate({
            schema: Validator_1.schema.create({
                nombre: Validator_1.schema.string([
                    Validator_1.rules.maxLength(255),
                    Validator_1.rules.trim(),
                ]),
                codigo: Validator_1.schema.string([
                    Validator_1.rules.maxLength(20),
                    Validator_1.rules.trim(),
                ]),
                resolucionMinisterial: Validator_1.schema.string.nullableAndOptional([
                    Validator_1.rules.maxLength(50),
                    Validator_1.rules.trim(),
                ]),
                imagen: Validator_1.schema.file.nullableAndOptional({
                    size: '2mb',
                    extnames: ['jpg', 'jpeg', 'webp', 'gif', 'png', 'svg', 'JPG', 'JPEG', 'WEBP', 'GIF', 'PNG', 'SVG'],
                }),
                filialId: Validator_1.schema.string(),
                descripcion: Validator_1.schema.string([
                    Validator_1.rules.maxLength(1000),
                    Validator_1.rules.trim(),
                ]),
            }),
        });
        if ((await Prisma_1.prisma.idioma.count({
            where: {
                filial: {
                    id: payload.filialId,
                },
                nombre: {
                    equals: payload.nombre,
                    mode: 'insensitive',
                },
                id: {
                    not: request.param('id'),
                },
            },
        })) > 0) {
            return response.status(422).send({
                message: 'Registro duplicado',
                errors: {
                    nombre: ['El registro ya existe'],
                },
            });
        }
        if ((await Prisma_1.prisma.idioma.count({
            where: {
                filial: {
                    id: payload.filialId,
                },
                codigo: {
                    equals: payload.codigo,
                    mode: 'insensitive',
                },
                id: {
                    not: request.param('id'),
                },
            },
        })) > 0) {
            return response.status(422).send({
                message: 'Registro duplicado',
                errors: {
                    codigo: ['El registro ya existe'],
                },
            });
        }
        try {
            let nombreImagen;
            if (payload.imagen) {
                if (registro.imagen) {
                    const archivo = `./tmp/uploads/idiomas/${registro.imagen}`;
                    if (fs.existsSync(archivo)) {
                        fs.unlinkSync(archivo);
                    }
                }
                nombreImagen = `${new Date().getTime()}.${payload.imagen.extname}`;
                await payload.imagen.moveToDisk(`./idiomas`, {
                    name: nombreImagen
                });
                registro.imagen = nombreImagen;
            }
            return response.send({
                message: 'Registro actualizado',
                payload: await Prisma_1.prisma.idioma.update({
                    where: {
                        id: registro.id,
                    },
                    data: {
                        nombre: payload.nombre,
                        codigo: payload.codigo,
                        resolucionMinisterial: payload.resolucionMinisterial === undefined ? null : payload.resolucionMinisterial,
                        imagen: registro.imagen,
                        filial: {
                            connect: { id: payload.filialId },
                        },
                        descripcion: payload.descripcion,
                    },
                }),
            });
        }
        catch (err) {
            Logger_1.default.error(err.message);
            return response.status(500).send({
                message: 'Error al almacenar el registro',
            });
        }
    }
    async destroy({ request, response }) {
        if ((await Prisma_1.prisma.idioma.count({
            where: {
                id: request.param('id'),
            },
        })) !== 1) {
            return response.status(404).send({
                message: 'Registro inexistente',
            });
        }
        await Prisma_1.prisma.idioma.delete({
            where: {
                id: request.param('id'),
            },
        });
        return response.send({
            message: 'Registro eliminado',
        });
    }
    async cursos({ request, response }) {
        return response.send({
            message: 'Detalle del registro',
            payload: await Prisma_1.prisma.idioma.findMany({
                where: {
                    id: request.param('id'),
                },
                include: {
                    cursos: true,
                },
            }),
        });
    }
    async excel({ request, response }) {
        const filialId = request.input('filialId') || '';
        if (filialId == '') {
            return response.status(422).send({
                message: 'Debe seleccionar una filial',
            });
        }
        const dir = './tmp/uploads/excel';
        if (!fs.existsSync(dir)) {
            fs.mkdirSync(dir, { recursive: true });
        }
        const archivo = `idiomas_${Math.floor(new Date().getTime() / 1000)}.xlsx`;
        const libro = new exceljs_1.default.Workbook();
        const hoja = libro.addWorksheet('Idiomas');
        hoja.columns = [
            { key: 'codigo', header: 'Código', },
            { key: 'nombre', header: 'Nombre', },
            { key: 'resolucionMinisterial', header: 'Resolución Ministerial', },
            { key: 'descripcion', header: 'Descripción', },
        ];
        hoja.getRow(1).font = {
            bold: true,
        };
        (await Prisma_1.prisma.idioma.findMany({
            where: {
                filial: {
                    id: filialId,
                },
            },
            orderBy: [
                {
                    codigo: 'asc',
                }, {
                    nombre: 'asc',
                },
            ],
        })).forEach(item => {
            hoja.addRow(item);
        });
        await response.header('content-type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
        await response.header('content-disposition', `attachment; filename=${archivo}`);
        await libro.xlsx.writeFile(`${dir}/${archivo}`);
        return response.download(`${dir}/${archivo}`, true, (err) => {
            if (err) {
                Logger_1.default.error(err.message);
                return response.status(500).send({
                    message: 'Error al generar el archivo',
                });
            }
            fs.unlinkSync(`${dir}/${archivo}`);
        });
    }
}
exports.default = IdiomasController;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSWRpb21hc0NvbnRyb2xsZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJJZGlvbWFzQ29udHJvbGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsdUNBQXdCO0FBRXhCLDJFQUEwRDtBQUMxRCx1RUFBa0Q7QUFDbEQsc0RBQTJCO0FBQzNCLHNGQUE0QztBQUU1QyxNQUFxQixpQkFBaUI7SUFDN0IsS0FBSyxDQUFDLEtBQUssQ0FBQyxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQXVCO1FBQzNELE1BQU0sTUFBTSxHQUFXLFFBQVEsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFBO1FBQzdELE1BQU0sU0FBUyxHQUFXLFFBQVEsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFBO1FBQ25FLE1BQU0sTUFBTSxHQUFXLE9BQU8sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFBO1FBQ3BELE1BQU0sS0FBSyxHQUFZLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxLQUFLLENBQUMsQ0FBQTtRQUNsRSxNQUFNLFFBQVEsR0FBVyxPQUFPLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsQ0FBQTtRQUN4RCxJQUFJLFFBQVEsSUFBSSxFQUFFLEVBQUU7WUFDbEIsT0FBTyxRQUFRLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQztnQkFDL0IsT0FBTyxFQUFFLDZCQUE2QjthQUN2QyxDQUFDLENBQUE7U0FDSDtRQUVELElBQUksS0FBSyxFQUFFO1lBQ1QsT0FBTyxRQUFRLENBQUMsSUFBSSxDQUFDO2dCQUNuQixPQUFPLEVBQUUsb0JBQW9CO2dCQUM3QixPQUFPLEVBQUUsTUFBTSxlQUFNLENB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LENBQUMsQ0FBQTtRQUMvQyxPQUFPLFFBQVEsQ0FBQyxRQUFRLENBQUMsR0FBRyxHQUFHLElBQUksT0FBTyxFQUFFLEVBQUUsSUFBSSxFQUFFLENBQUMsR0FBRyxFQUFFLEVBQUU7WUFDMUQsSUFBSSxHQUFHLEVBQUU7Z0JBQ1AsZ0JBQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFBO2dCQUN6QixPQUFPLFFBQVEsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDO29CQUMvQixPQUFPLEVBQUUsNkJBQTZCO2lCQUN2QyxDQUFDLENBQUE7YUFDSDtZQUNELEVBQUUsQ0FBQyxVQUFVLENBQUMsR0FBRyxHQUFHLElBQUksT0FBTyxFQUFFLENBQUMsQ0FBQTtRQUNwQyxDQUFDLENBQUMsQ0FBQTtJQUNKLENBQUM7Q0FDRjtBQW5hRCxvQ0FtYUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBmcyBmcm9tICdmcydcbmltcG9ydCB0eXBlIHsgSHR0cENvbnRleHRDb250cmFjdCB9IGZyb20gJ0Bpb2M6QWRvbmlzL0NvcmUvSHR0cENvbnRleHQnXG5pbXBvcnQgeyBzY2hlbWEsIHJ1bGVzIH0gZnJvbSAnQGlvYzpBZG9uaXMvQ29yZS9WYWxpZGF0b3InXG5pbXBvcnQgeyBwcmlzbWEgfSBmcm9tICdAaW9jOkFkb25pcy9BZGRvbnMvUHJpc21hJ1xuaW1wb3J0IEV4Y2VsIGZyb20gJ2V4Y2VsanMnXG5pbXBvcnQgTG9nZ2VyIGZyb20gJ0Bpb2M6QWRvbmlzL0NvcmUvTG9nZ2VyJ1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBJZGlvbWFzQ29udHJvbGxlciB7XG4gIHB1YmxpYyBhc3luYyBpbmRleCh7IHJlcXVlc3QsIHJlc3BvbnNlIH06IEh0dHBDb250ZXh0Q29udHJhY3QpIHtcbiAgICBjb25zdCBwYWdpbmE6IG51bWJlciA9IHBhcnNlSW50KHJlcXVlc3QuaW5wdXQoJ3BhZ2luYScpIHx8IDEpXG4gICAgY29uc3QgcG9yUGFnaW5hOiBudW1iZXIgPSBwYXJzZUludChyZXF1ZXN0LmlucHV0KCdwb3JQYWdpbmEnKSB8fCA4KVxuICAgIGNvbnN0IGJ1c2Nhcjogc3RyaW5nID0gcmVxdWVzdC5pbnB1dCgnYnVzY2FyJykgfHwgJydcbiAgICBjb25zdCBjb21ibzogYm9vbGVhbiA9IEpTT04ucGFyc2UocmVxdWVzdC5pbnB1dCgnY29tYm8nKSB8fCBmYWxzZSlcbiAgICBjb25zdCBmaWxpYWxJZDogc3RyaW5nID0gcmVxdWVzdC5pbnB1dCgnZmlsaWFsSWQnKSB8fCAnJ1xuICAgIGlmIChmaWxpYWxJZCA9PSAnJykge1xuICAgICAgcmV0dXJuIHJlc3BvbnNlLnN0YXR1cyg0MjIpLnNlbmQoe1xuICAgICAgICBtZXNzYWdlOiAnRGViZSBzZWxlY2Npb25hciB1bmEgZmlsaWFsJyxcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgaWYgKGNvbWJvKSB7XG4gICAgICByZXR1cm4gcmVzcG9uc2Uuc2VuZCh7XG4gICAgICAgIG1lc3NhZ2U6ICdMaXN0YSBkZSByZWdpc3Ryb3MnLFxuICAgICAgICBwYXlsb2FkOiBhd2FpdCBwcmlzbWEuaWRpb21hLmZpbmRNYW55KHtcbiAgICAgICAgICB3aGVyZToge1xuICAgICAgICAgICAgZmlsaWFsOiB7XG4gICAgICAgICAgICAgIGlkOiBmaWxpYWxJZCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSxcbiAgICAgICAgICBvcmRlckJ5OiBbXG4gICAgICAgICAgICB7IGNvZGlnbzogJ2FzYycgfSxcbiAgICAgICAgICAgIHsgbm9tYnJlOiAnYXNjJyB9LFxuICAgICAgICAgIF0sXG4gICAgICAgICAgc2VsZWN0OiB7XG4gICAgICAgICAgICBpZDogdHJ1ZSxcbiAgICAgICAgICAgIG5vbWJyZTogdHJ1ZSxcbiAgICAgICAgICAgIGRlc2NyaXBjaW9uOiB0cnVlLFxuICAgICAgICAgICAgY29kaWdvOiB0cnVlLFxuICAgICAgICAgICAgaW1hZ2VuOiB0cnVlLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0pLFxuICAgICAgfSlcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgWyBkYXRhLCB0b3RhbCBdID0gYXdhaXQgcHJpc21hLiR0cmFuc2FjdGlvbihbXG4gICAgICAgIHByaXNtYS5pZGlvbWEuZmluZE1hbnkoe1xuICAgICAgICAgIHNraXA6IChwYWdpbmEgLSAxKSAqIHBvclBhZ2luYSxcbiAgICAgICAgICB0YWtlOiBwb3JQYWdpbmEsXG4gICAgICAgICAgb3JkZXJCeTogW1xuICAgICAgICAgICAgeyBjb2RpZ286ICdhc2MnIH0sXG4gICAgICAgICAgICB7IG5vbWJyZTogJ2FzYycgfSxcbiAgICAgICAgICBdLFxuICAgICAgICAgIHdoZXJlOiB7XG4gICAgICAgICAgICBmaWxpYWw6IHtcbiAgICAgICAgICAgICAgaWQ6IGZpbGlhbElkLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIE9SOiBbXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBub21icmU6IHtcbiAgICAgICAgICAgICAgICAgIGNvbnRhaW5zOiBidXNjYXIsXG4gICAgICAgICAgICAgICAgICBtb2RlOiAnaW5zZW5zaXRpdmUnLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBjb2RpZ286IHtcbiAgICAgICAgICAgICAgICAgIGNvbnRhaW5zOiBidXNjYXIsXG4gICAgICAgICAgICAgICAgICBtb2RlOiAnaW5zZW5zaXRpdmUnLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBdLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0pLFxuICAgICAgICBwcmlzbWEuaWRpb21hLmNvdW50KHtcbiAgICAgICAgICB3aGVyZToge1xuICAgICAgICAgICAgZmlsaWFsOiB7XG4gICAgICAgICAgICAgIGlkOiBmaWxpYWxJZCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBPUjogW1xuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbm9tYnJlOiB7XG4gICAgICAgICAgICAgICAgICBjb250YWluczogYnVzY2FyLFxuICAgICAgICAgICAgICAgICAgbW9kZTogJ2luc2Vuc2l0aXZlJyxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgY29kaWdvOiB7XG4gICAgICAgICAgICAgICAgICBjb250YWluczogYnVzY2FyLFxuICAgICAgICAgICAgICAgICAgbW9kZTogJ2luc2Vuc2l0aXZlJyxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICB9LFxuICAgICAgICB9KVxuICAgICAgXSlcbiAgICAgIHJldHVybiByZXNwb25zZS5zZW5kKHtcbiAgICAgICAgbWVzc2FnZTogJ0xpc3RhIGRlIHJlZ2lzdHJvcycsXG4gICAgICAgIHBheWxvYWQ6IHtcbiAgICAgICAgICBkYXRhOiBkYXRhLFxuICAgICAgICAgIG1ldGE6IHtcbiAgICAgICAgICAgIGxhc3RQYWdlOiBNYXRoLmNlaWwodG90YWwvcG9yUGFnaW5hKSxcbiAgICAgICAgICAgIHRvdGFsOiB0b3RhbCxcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICB9KVxuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBzdG9yZSh7IHJlcXVlc3QsIHJlc3BvbnNlIH06IEh0dHBDb250ZXh0Q29udHJhY3QpIHtcbiAgICBjb25zdCBwYXlsb2FkID0gYXdhaXQgcmVxdWVzdC52YWxpZGF0ZSh7XG4gICAgICBzY2hlbWE6IHNjaGVtYS5jcmVhdGUoe1xuICAgICAgICBub21icmU6IHNjaGVtYS5zdHJpbmcoW1xuICAgICAgICAgIHJ1bGVzLm1heExlbmd0aCgyNTUpLFxuICAgICAgICAgIHJ1bGVzLnRyaW0oKSxcbiAgICAgICAgXSksXG4gICAgICAgIGNvZGlnbzogc2NoZW1hLnN0cmluZyhbXG4gICAgICAgICAgcnVsZXMubWF4TGVuZ3RoKDIwKSxcbiAgICAgICAgICBydWxlcy50cmltKCksXG4gICAgICAgIF0pLFxuICAgICAgICByZXNvbHVjaW9uTWluaXN0ZXJpYWw6IHNjaGVtYS5zdHJpbmcubnVsbGFibGVBbmRPcHRpb25hbChbXG4gICAgICAgICAgcnVsZXMubWF4TGVuZ3RoKDUwKSxcbiAgICAgICAgICBydWxlcy50cmltKCksXG4gICAgICAgIF0pLFxuICAgICAgICBpbWFnZW46IHNjaGVtYS5maWxlLm51bGxhYmxlQW5kT3B0aW9uYWwoe1xuICAgICAgICAgIHNpemU6ICcybWInLFxuICAgICAgICAgIGV4dG5hbWVzOiBbJ2pwZycsICdqcGVnJywgJ3dlYnAnLCAnZ2lmJywgJ3BuZycsICdzdmcnLCAnSlBHJywgJ0pQRUcnLCAnV0VCUCcsICdHSUYnLCAnUE5HJywgJ1NWRyddLFxuICAgICAgICB9KSxcbiAgICAgICAgZmlsaWFsSWQ6IHNjaGVtYS5zdHJpbmcoKSxcbiAgICAgICAgZGVzY3JpcGNpb246IHNjaGVtYS5zdHJpbmcoW1xuICAgICAgICAgIHJ1bGVzLm1heExlbmd0aCgxMDAwKSxcbiAgICAgICAgICBydWxlcy50cmltKCksXG4gICAgICAgIF0pLFxuICAgICAgfSksXG4gICAgfSlcbiAgICBpZiAoKGF3YWl0IHByaXNtYS5pZGlvbWEuY291bnQoe1xuICAgICAgd2hlcmU6IHtcbiAgICAgICAgZmlsaWFsOiB7XG4gICAgICAgICAgaWQ6IHBheWxvYWQuZmlsaWFsSWQsXG4gICAgICAgIH0sXG4gICAgICAgIG5vbWJyZToge1xuICAgICAgICAgIGVxdWFsczogcGF5bG9hZC5ub21icmUsXG4gICAgICAgICAgbW9kZTogJ2luc2Vuc2l0aXZlJyxcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgfSkpID4gMCkge1xuICAgICAgcmV0dXJuIHJlc3BvbnNlLnN0YXR1cyg0MjIpLnNlbmQoe1xuICAgICAgICBtZXNzYWdlOiAnUmVnaXN0cm8gZHVwbGljYWRvJyxcbiAgICAgICAgZXJyb3JzOiB7XG4gICAgICAgICAgbm9tYnJlOiBbJ0VsIHJlZ2lzdHJvIHlhIGV4aXN0ZSddLFxuICAgICAgICB9LFxuICAgICAgfSlcbiAgICB9XG4gICAgaWYgKChhd2FpdCBwcmlzbWEuaWRpb21hLmNvdW50KHtcbiAgICAgIHdoZXJlOiB7XG4gICAgICAgIGZpbGlhbDoge1xuICAgICAgICAgIGlkOiBwYXlsb2FkLmZpbGlhbElkLFxuICAgICAgICB9LFxuICAgICAgICBjb2RpZ286IHtcbiAgICAgICAgICBlcXVhbHM6IHBheWxvYWQuY29kaWdvLFxuICAgICAgICAgIG1vZGU6ICdpbnNlbnNpdGl2ZScsXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIH0pKSA+IDApIHtcbiAgICAgIHJldHVybiByZXNwb25zZS5zdGF0dXMoNDIyKS5zZW5kKHtcbiAgICAgICAgbWVzc2FnZTogJ1JlZ2lzdHJvIGR1cGxpY2FkbycsXG4gICAgICAgIGVycm9yczoge1xuICAgICAgICAgIGNvZGlnbzogWydFbCByZWdpc3RybyB5YSBleGlzdGUnXSxcbiAgICAgICAgfSxcbiAgICAgIH0pXG4gICAgfVxuICAgIHRyeSB7XG4gICAgICBsZXQgbm9tYnJlSW1hZ2VuXG4gICAgICBpZiAocGF5bG9hZC5pbWFnZW4pIHtcbiAgICAgICAgbm9tYnJlSW1hZ2VuID0gYCR7bmV3IERhdGUoKS5nZXRUaW1lKCl9LiR7cGF5bG9hZC5pbWFnZW4uZXh0bmFtZX1gO1xuICAgICAgICBhd2FpdCBwYXlsb2FkLmltYWdlbi5tb3ZlVG9EaXNrKGAuL2lkaW9tYXNgLCB7XG4gICAgICAgICAgbmFtZTogbm9tYnJlSW1hZ2VuXG4gICAgICAgIH0pXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBub21icmVJbWFnZW4gPSBudWxsXG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzcG9uc2Uuc2VuZCh7XG4gICAgICAgIG1lc3NhZ2U6ICdSZWdpc3RybyBhbG1hY2VuYWRvJyxcbiAgICAgICAgcGF5bG9hZDogYXdhaXQgcHJpc21hLmlkaW9tYS5jcmVhdGUoe1xuICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIG5vbWJyZTogcGF5bG9hZC5ub21icmUsXG4gICAgICAgICAgICBjb2RpZ286IHBheWxvYWQuY29kaWdvLFxuICAgICAgICAgICAgcmVzb2x1Y2lvbk1pbmlzdGVyaWFsOiBwYXlsb2FkLnJlc29sdWNpb25NaW5pc3RlcmlhbCxcbiAgICAgICAgICAgIGltYWdlbjogbm9tYnJlSW1hZ2VuLFxuICAgICAgICAgICAgZmlsaWFsOiB7XG4gICAgICAgICAgICAgIGNvbm5lY3Q6IHsgaWQ6IHBheWxvYWQuZmlsaWFsSWQgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkZXNjcmlwY2lvbjogcGF5bG9hZC5kZXNjcmlwY2lvbixcbiAgICAgICAgICB9LFxuICAgICAgICB9KSxcbiAgICAgIH0pXG4gICAgfSBjYXRjaChlcnIpIHtcbiAgICAgIExvZ2dlci5lcnJvcihlcnIubWVzc2FnZSlcbiAgICAgIHJldHVybiByZXNwb25zZS5zdGF0dXMoNTAwKS5zZW5kKHtcbiAgICAgICAgbWVzc2FnZTogJ0Vycm9yIGFsIGFsbWFjZW5hciBlbCByZWdpc3RybycsXG4gICAgICB9KVxuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBzaG93KHsgcmVxdWVzdCwgcmVzcG9uc2UgfTogSHR0cENvbnRleHRDb250cmFjdCkge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gcmVzcG9uc2Uuc2VuZCh7XG4gICAgICAgIG1lc3NhZ2U6ICdEZXRhbGxlIGRlbCByZWdpc3RybycsXG4gICAgICAgIHBheWxvYWQ6IGF3YWl0IHByaXNtYS5pZGlvbWEuZmluZFVuaXF1ZU9yVGhyb3coe1xuICAgICAgICAgIHdoZXJlOiB7XG4gICAgICAgICAgICBpZDogcmVxdWVzdC5wYXJhbSgnaWQnKSxcbiAgICAgICAgICB9LFxuICAgICAgICB9KSxcbiAgICAgIH0pXG4gICAgfSBjYXRjaChlcnIpIHtcbiAgICAgIExvZ2dlci5lcnJvcihlcnIpXG4gICAgICByZXR1cm4gcmVzcG9uc2Uuc3RhdHVzKDQwNCkuc2VuZCh7XG4gICAgICAgIG1lc3NhZ2U6ICdSZWdpc3RybyBpbmV4aXN0ZW50ZScsXG4gICAgICB9KVxuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBhc3luYyB1cGRhdGUoeyByZXF1ZXN0LCByZXNwb25zZSB9OiBIdHRwQ29udGV4dENvbnRyYWN0KSB7XG4gICAgbGV0IHJlZ2lzdHJvXG4gICAgdHJ5IHtcbiAgICAgIHJlZ2lzdHJvID0gYXdhaXQgcHJpc21hLmlkaW9tYS5maW5kVW5pcXVlT3JUaHJvdyh7XG4gICAgICAgIHdoZXJlOiB7XG4gICAgICAgICAgaWQ6IHJlcXVlc3QucGFyYW0oJ2lkJyksXG4gICAgICAgIH0sXG4gICAgICB9KVxuICAgIH0gY2F0Y2goZXJyKSB7XG4gICAgICBMb2dnZXIuZXJyb3IoZXJyKVxuICAgICAgcmV0dXJuIHJlc3BvbnNlLnN0YXR1cyg0MDQpLnNlbmQoe1xuICAgICAgICBtZXNzYWdlOiAnUmVnaXN0cm8gaW5leGlzdGVudGUnLFxuICAgICAgfSlcbiAgICB9XG4gICAgY29uc3QgcGF5bG9hZCA9IGF3YWl0IHJlcXVlc3QudmFsaWRhdGUoe1xuICAgICAgc2NoZW1hOiBzY2hlbWEuY3JlYXRlKHtcbiAgICAgICAgbm9tYnJlOiBzY2hlbWEuc3RyaW5nKFtcbiAgICAgICAgICBydWxlcy5tYXhMZW5ndGgoMjU1KSxcbiAgICAgICAgICBydWxlcy50cmltKCksXG4gICAgICAgIF0pLFxuICAgICAgICBjb2RpZ286IHNjaGVtYS5zdHJpbmcoW1xuICAgICAgICAgIHJ1bGVzLm1heExlbmd0aCgyMCksXG4gICAgICAgICAgcnVsZXMudHJpbSgpLFxuICAgICAgICBdKSxcbiAgICAgICAgcmVzb2x1Y2lvbk1pbmlzdGVyaWFsOiBzY2hlbWEuc3RyaW5nLm51bGxhYmxlQW5kT3B0aW9uYWwoW1xuICAgICAgICAgIHJ1bGVzLm1heExlbmd0aCg1MCksXG4gICAgICAgICAgcnVsZXMudHJpbSgpLFxuICAgICAgICBdKSxcbiAgICAgICAgaW1hZ2VuOiBzY2hlbWEuZmlsZS5udWxsYWJsZUFuZE9wdGlvbmFsKHtcbiAgICAgICAgICBzaXplOiAnMm1iJyxcbiAgICAgICAgICBleHRuYW1lczogWydqcGcnLCAnanBlZycsICd3ZWJwJywgJ2dpZicsICdwbmcnLCAnc3ZnJywgJ0pQRycsICdKUEVHJywgJ1dFQlAnLCAnR0lGJywgJ1BORycsICdTVkcnXSxcbiAgICAgICAgfSksXG4gICAgICAgIGZpbGlhbElkOiBzY2hlbWEuc3RyaW5nKCksXG4gICAgICAgIGRlc2NyaXBjaW9uOiBzY2hlbWEuc3RyaW5nKFtcbiAgICAgICAgICBydWxlcy5tYXhMZW5ndGgoMTAwMCksXG4gICAgICAgICAgcnVsZXMudHJpbSgpLFxuICAgICAgICBdKSxcbiAgICAgIH0pLFxuICAgIH0pXG4gICAgaWYgKChhd2FpdCBwcmlzbWEuaWRpb21hLmNvdW50KHtcbiAgICAgIHdoZXJlOiB7XG4gICAgICAgIGZpbGlhbDoge1xuICAgICAgICAgIGlkOiBwYXlsb2FkLmZpbGlhbElkLFxuICAgICAgICB9LFxuICAgICAgICBub21icmU6IHtcbiAgICAgICAgICBlcXVhbHM6IHBheWxvYWQubm9tYnJlLFxuICAgICAgICAgIG1vZGU6ICdpbnNlbnNpdGl2ZScsXG4gICAgICAgIH0sXG4gICAgICAgIGlkOiB7XG4gICAgICAgICAgbm90OiByZXF1ZXN0LnBhcmFtKCdpZCcpLFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICB9KSkgPiAwKSB7XG4gICAgICByZXR1cm4gcmVzcG9uc2Uuc3RhdHVzKDQyMikuc2VuZCh7XG4gICAgICAgIG1lc3NhZ2U6ICdSZWdpc3RybyBkdXBsaWNhZG8nLFxuICAgICAgICBlcnJvcnM6IHtcbiAgICAgICAgICBub21icmU6IFsnRWwgcmVnaXN0cm8geWEgZXhpc3RlJ10sXG4gICAgICAgIH0sXG4gICAgICB9KVxuICAgIH1cbiAgICBpZiAoKGF3YWl0IHByaXNtYS5pZGlvbWEuY291bnQoe1xuICAgICAgd2hlcmU6IHtcbiAgICAgICAgZmlsaWFsOiB7XG4gICAgICAgICAgaWQ6IHBheWxvYWQuZmlsaWFsSWQsXG4gICAgICAgIH0sXG4gICAgICAgIGNvZGlnbzoge1xuICAgICAgICAgIGVxdWFsczogcGF5bG9hZC5jb2RpZ28sXG4gICAgICAgICAgbW9kZTogJ2luc2Vuc2l0aXZlJyxcbiAgICAgICAgfSxcbiAgICAgICAgaWQ6IHtcbiAgICAgICAgICBub3Q6IHJlcXVlc3QucGFyYW0oJ2lkJyksXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIH0pKSA+IDApIHtcbiAgICAgIHJldHVybiByZXNwb25zZS5zdGF0dXMoNDIyKS5zZW5kKHtcbiAgICAgICAgbWVzc2FnZTogJ1JlZ2lzdHJvIGR1cGxpY2FkbycsXG4gICAgICAgIGVycm9yczoge1xuICAgICAgICAgIGNvZGlnbzogWydFbCByZWdpc3RybyB5YSBleGlzdGUnXSxcbiAgICAgICAgfSxcbiAgICAgIH0pXG4gICAgfVxuICAgIHRyeSB7XG4gICAgICBsZXQgbm9tYnJlSW1hZ2VuXG4gICAgICBpZiAocGF5bG9hZC5pbWFnZW4pIHtcbiAgICAgICAgaWYgKHJlZ2lzdHJvLmltYWdlbikge1xuICAgICAgICAgIGNvbnN0IGFyY2hpdm8gPSBgLi90bXAvdXBsb2Fkcy9pZGlvbWFzLyR7cmVnaXN0cm8uaW1hZ2VufWBcbiAgICAgICAgICBpZiAoZnMuZXhpc3RzU3luYyhhcmNoaXZvKSkge1xuICAgICAgICAgICAgZnMudW5saW5rU3luYyhhcmNoaXZvKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBub21icmVJbWFnZW4gPSBgJHtuZXcgRGF0ZSgpLmdldFRpbWUoKX0uJHtwYXlsb2FkLmltYWdlbi5leHRuYW1lfWA7XG4gICAgICAgIGF3YWl0IHBheWxvYWQuaW1hZ2VuLm1vdmVUb0Rpc2soYC4vaWRpb21hc2AsIHtcbiAgICAgICAgICBuYW1lOiBub21icmVJbWFnZW5cbiAgICAgICAgfSlcbiAgICAgICAgcmVnaXN0cm8uaW1hZ2VuID0gbm9tYnJlSW1hZ2VuXG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzcG9uc2Uuc2VuZCh7XG4gICAgICAgIG1lc3NhZ2U6ICdSZWdpc3RybyBhY3R1YWxpemFkbycsXG4gICAgICAgIHBheWxvYWQ6IGF3YWl0IHByaXNtYS5pZGlvbWEudXBkYXRlKHtcbiAgICAgICAgICB3aGVyZToge1xuICAgICAgICAgICAgaWQ6IHJlZ2lzdHJvLmlkLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgbm9tYnJlOiBwYXlsb2FkLm5vbWJyZSxcbiAgICAgICAgICAgIGNvZGlnbzogcGF5bG9hZC5jb2RpZ28sXG4gICAgICAgICAgICByZXNvbHVjaW9uTWluaXN0ZXJpYWw6IHBheWxvYWQucmVzb2x1Y2lvbk1pbmlzdGVyaWFsID09PSB1bmRlZmluZWQgPyBudWxsIDogcGF5bG9hZC5yZXNvbHVjaW9uTWluaXN0ZXJpYWwsXG4gICAgICAgICAgICBpbWFnZW46IHJlZ2lzdHJvLmltYWdlbixcbiAgICAgICAgICAgIGZpbGlhbDoge1xuICAgICAgICAgICAgICBjb25uZWN0OiB7IGlkOiBwYXlsb2FkLmZpbGlhbElkIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZGVzY3JpcGNpb246IHBheWxvYWQuZGVzY3JpcGNpb24sXG4gICAgICAgICAgfSxcbiAgICAgICAgfSksXG4gICAgICB9KVxuICAgIH0gY2F0Y2goZXJyKSB7XG4gICAgICBMb2dnZXIuZXJyb3IoZXJyLm1lc3NhZ2UpXG4gICAgICByZXR1cm4gcmVzcG9uc2Uuc3RhdHVzKDUwMCkuc2VuZCh7XG4gICAgICAgIG1lc3NhZ2U6ICdFcnJvciBhbCBhbG1hY2VuYXIgZWwgcmVnaXN0cm8nLFxuICAgICAgfSlcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgZGVzdHJveSh7IHJlcXVlc3QsIHJlc3BvbnNlIH06IEh0dHBDb250ZXh0Q29udHJhY3QpIHtcbiAgICBpZiAoKGF3YWl0IHByaXNtYS5pZGlvbWEuY291bnQoe1xuICAgICAgd2hlcmU6IHtcbiAgICAgICAgaWQ6IHJlcXVlc3QucGFyYW0oJ2lkJyksXG4gICAgICB9LFxuICAgIH0pKSAhPT0gMSkge1xuICAgICAgcmV0dXJuIHJlc3BvbnNlLnN0YXR1cyg0MDQpLnNlbmQoe1xuICAgICAgICBtZXNzYWdlOiAnUmVnaXN0cm8gaW5leGlzdGVudGUnLFxuICAgICAgfSlcbiAgICB9XG4gICAgYXdhaXQgcHJpc21hLmlkaW9tYS5kZWxldGUoe1xuICAgICAgd2hlcmU6IHtcbiAgICAgICAgaWQ6IHJlcXVlc3QucGFyYW0oJ2lkJyksXG4gICAgICB9LFxuICAgIH0pXG4gICAgcmV0dXJuIHJlc3BvbnNlLnNlbmQoe1xuICAgICAgbWVzc2FnZTogJ1JlZ2lzdHJvIGVsaW1pbmFkbycsXG4gICAgfSlcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBjdXJzb3MoeyByZXF1ZXN0LCByZXNwb25zZSB9OiBIdHRwQ29udGV4dENvbnRyYWN0KSB7XG4gICAgcmV0dXJuIHJlc3BvbnNlLnNlbmQoe1xuICAgICAgbWVzc2FnZTogJ0RldGFsbGUgZGVsIHJlZ2lzdHJvJyxcbiAgICAgIHBheWxvYWQ6IGF3YWl0IHByaXNtYS5pZGlvbWEuZmluZE1hbnkoe1xuICAgICAgICB3aGVyZToge1xuICAgICAgICAgIGlkOiByZXF1ZXN0LnBhcmFtKCdpZCcpLFxuICAgICAgICB9LFxuICAgICAgICBpbmNsdWRlOiB7XG4gICAgICAgICAgY3Vyc29zOiB0cnVlLFxuICAgICAgICB9LFxuICAgICAgfSksXG4gICAgfSlcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBleGNlbCh7IHJlcXVlc3QsIHJlc3BvbnNlIH0pIHtcbiAgICBjb25zdCBmaWxpYWxJZDogc3RyaW5nID0gcmVxdWVzdC5pbnB1dCgnZmlsaWFsSWQnKSB8fCAnJ1xuICAgIGlmIChmaWxpYWxJZCA9PSAnJykge1xuICAgICAgcmV0dXJuIHJlc3BvbnNlLnN0YXR1cyg0MjIpLnNlbmQoe1xuICAgICAgICBtZXNzYWdlOiAnRGViZSBzZWxlY2Npb25hciB1bmEgZmlsaWFsJyxcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgY29uc3QgZGlyID0gJy4vdG1wL3VwbG9hZHMvZXhjZWwnXG4gICAgaWYgKCFmcy5leGlzdHNTeW5jKGRpcikpe1xuICAgICAgZnMubWtkaXJTeW5jKGRpciwgeyByZWN1cnNpdmU6IHRydWUgfSlcbiAgICB9XG4gICAgY29uc3QgYXJjaGl2byA9IGBpZGlvbWFzXyR7TWF0aC5mbG9vcihuZXcgRGF0ZSgpLmdldFRpbWUoKSAvIDEwMDApfS54bHN4YFxuICAgIGNvbnN0IGxpYnJvID0gbmV3IEV4Y2VsLldvcmtib29rKClcbiAgICBjb25zdCBob2phID0gbGlicm8uYWRkV29ya3NoZWV0KCdJZGlvbWFzJylcbiAgICBob2phLmNvbHVtbnMgPSBbXG4gICAgICB7IGtleTogJ2NvZGlnbycsIGhlYWRlcjogJ0PDs2RpZ28nLCB9LFxuICAgICAgeyBrZXk6ICdub21icmUnLCBoZWFkZXI6ICdOb21icmUnLCB9LFxuICAgICAgeyBrZXk6ICdyZXNvbHVjaW9uTWluaXN0ZXJpYWwnLCBoZWFkZXI6ICdSZXNvbHVjacOzbiBNaW5pc3RlcmlhbCcsIH0sXG4gICAgICB7IGtleTogJ2Rlc2NyaXBjaW9uJywgaGVhZGVyOiAnRGVzY3JpcGNpw7NuJywgfSxcbiAgICBdO1xuICAgIGhvamEuZ2V0Um93KDEpLmZvbnQgPSB7XG4gICAgICBib2xkOiB0cnVlLFxuICAgIH07XG4gICAgKGF3YWl0IHByaXNtYS5pZGlvbWEuZmluZE1hbnkoe1xuICAgICAgd2hlcmU6IHtcbiAgICAgICAgZmlsaWFsOiB7XG4gICAgICAgICAgaWQ6IGZpbGlhbElkLFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICAgIG9yZGVyQnk6IFtcbiAgICAgICAge1xuICAgICAgICAgIGNvZGlnbzogJ2FzYycsXG4gICAgICAgIH0sIHtcbiAgICAgICAgICBub21icmU6ICdhc2MnLFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICB9KSkuZm9yRWFjaChpdGVtID0+IHtcbiAgICAgIGhvamEuYWRkUm93KGl0ZW0pXG4gICAgfSlcbiAgICBhd2FpdCByZXNwb25zZS5oZWFkZXIoJ2NvbnRlbnQtdHlwZScsICdhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQuc3ByZWFkc2hlZXRtbC5zaGVldCcpXG4gICAgYXdhaXQgcmVzcG9uc2UuaGVhZGVyKCdjb250ZW50LWRpc3Bvc2l0aW9uJywgYGF0dGFjaG1lbnQ7IGZpbGVuYW1lPSR7YXJjaGl2b31gKVxuICAgIGF3YWl0IGxpYnJvLnhsc3gud3JpdGVGaWxlKGAke2Rpcn0vJHthcmNoaXZvfWApXG4gICAgcmV0dXJuIHJlc3BvbnNlLmRvd25sb2FkKGAke2Rpcn0vJHthcmNoaXZvfWAsIHRydWUsIChlcnIpID0+IHtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgTG9nZ2VyLmVycm9yKGVyci5tZXNzYWdlKVxuICAgICAgICByZXR1cm4gcmVzcG9uc2Uuc3RhdHVzKDUwMCkuc2VuZCh7XG4gICAgICAgICAgbWVzc2FnZTogJ0Vycm9yIGFsIGdlbmVyYXIgZWwgYXJjaGl2bycsXG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgICBmcy51bmxpbmtTeW5jKGAke2Rpcn0vJHthcmNoaXZvfWApXG4gICAgfSlcbiAgfVxufVxuIl19