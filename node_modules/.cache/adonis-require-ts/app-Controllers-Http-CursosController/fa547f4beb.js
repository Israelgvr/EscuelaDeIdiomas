"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs = __importStar(require("fs"));
const Validator_1 = global[Symbol.for('ioc.use')]("Adonis/Core/Validator");
const Prisma_1 = global[Symbol.for('ioc.use')]("Adonis/Addons/Prisma");
const exceljs_1 = __importDefault(require("exceljs"));
const Logger_1 = __importDefault(global[Symbol.for('ioc.use')]("Adonis/Core/Logger"));
class CursosController {
    async index({ request, response }) {
        const pagina = parseInt(request.input('pagina') || 1);
        const porPagina = parseInt(request.input('porPagina') || 8);
        const buscar = request.input('buscar') || '';
        const combo = JSON.parse(request.input('combo') || false);
        const filtroIdioma = request.input('idiomaId') || '';
        const filialId = request.input('filialId') || '';
        if (filialId == '') {
            return response.status(422).send({
                message: 'Debe seleccionar una filial',
            });
        }
        if (filtroIdioma === '') {
            if (combo) {
                return response.send({
                    message: 'Lista de registros',
                    payload: await Prisma_1.prisma.curso.findMany({
                        where: {
                            filial: {
                                id: filialId,
                            },
                        },
                        orderBy: [
                            { nombre: 'asc' },
                        ],
                        include: {
                            idioma: true,
                            modalidad: true,
                            niveles: {
                                include: {
                                    libros: {
                                        orderBy: [
                                            { nombre: 'asc' },
                                        ],
                                    },
                                },
                            },
                        },
                    }),
                });
            }
            else {
                const [data, total] = await Prisma_1.prisma.$transaction([
                    Prisma_1.prisma.curso.findMany({
                        skip: (pagina - 1) * porPagina,
                        take: porPagina,
                        include: {
                            idioma: true,
                            modalidad: true,
                        },
                        orderBy: [
                            { nombre: 'asc' },
                        ],
                        where: {
                            filial: {
                                id: filialId,
                            },
                            OR: [
                                {
                                    nombre: {
                                        contains: buscar,
                                        mode: 'insensitive',
                                    },
                                },
                            ],
                        },
                    }),
                    Prisma_1.prisma.curso.count({
                        where: {
                            filial: {
                                id: filialId,
                            },
                            OR: [
                                {
                                    nombre: {
                                        contains: buscar,
                                        mode: 'insensitive',
                                    },
                                },
                            ],
                        },
                    })
                ]);
                return response.send({
                    message: 'Lista de registros',
                    payload: {
                        data: data,
                        meta: {
                            lastPage: Math.ceil(total / porPagina),
                            total: total,
                        }
                    },
                });
            }
        }
        else {
            if (combo) {
                return response.send({
                    message: 'Lista de registros',
                    payload: await Prisma_1.prisma.curso.findMany({
                        orderBy: [
                            { nombre: 'asc' },
                        ],
                        include: {
                            idioma: true,
                            modalidad: true,
                            niveles: {
                                include: {
                                    libros: {
                                        orderBy: [
                                            { nombre: 'asc' },
                                        ],
                                    },
                                },
                            },
                        },
                        where: {
                            filial: {
                                id: filialId,
                            },
                            idioma: {
                                id: filtroIdioma,
                            },
                        },
                    }),
                });
            }
            else {
                const [data, total] = await Prisma_1.prisma.$transaction([
                    Prisma_1.prisma.curso.findMany({
                        skip: (pagina - 1) * porPagina,
                        take: porPagina,
                        include: {
                            idioma: true,
                            modalidad: true,
                        },
                        orderBy: [
                            { nombre: 'asc' },
                        ],
                        where: {
                            filial: {
                                id: filialId,
                            },
                            idioma: {
                                id: filtroIdioma,
                            },
                            nombre: {
                                contains: buscar,
                                mode: 'insensitive',
                            },
                        },
                    }),
                    Prisma_1.prisma.curso.count({
                        where: {
                            filial: {
                                id: filialId,
                            },
                            idioma: {
                                id: filtroIdioma,
                            },
                            nombre: {
                                contains: buscar,
                                mode: 'insensitive',
                            },
                        },
                    })
                ]);
                return response.send({
                    message: 'Lista de registros',
                    payload: {
                        data: data,
                        meta: {
                            lastPage: Math.ceil(total / porPagina),
                            total: total,
                        }
                    },
                });
            }
        }
    }
    async store({ request, response }) {
        const payload = await request.validate({
            schema: Validator_1.schema.create({
                nombre: Validator_1.schema.string([
                    Validator_1.rules.maxLength(255),
                    Validator_1.rules.trim(),
                ]),
                activo: Validator_1.schema.boolean(),
                horaInicial: Validator_1.schema.string([
                    Validator_1.rules.time()
                ]),
                horaFinal: Validator_1.schema.string([
                    Validator_1.rules.time()
                ]),
                filialId: Validator_1.schema.string(),
                idiomaId: Validator_1.schema.string(),
                modalidadId: Validator_1.schema.string(),
                niveles: Validator_1.schema.array([
                    Validator_1.rules.minLength(1),
                ]).members(Validator_1.schema.string()),
            }),
        });
        try {
            return response.send({
                message: 'Registro almacenado',
                payload: await Prisma_1.prisma.curso.create({
                    data: {
                        nombre: payload.nombre,
                        activo: true,
                        modalidad: {
                            connect: { id: payload.modalidadId },
                        },
                        idioma: {
                            connect: { id: payload.idiomaId },
                        },
                        filial: {
                            connect: { id: payload.filialId },
                        },
                        horaInicial: payload.horaInicial,
                        horaFinal: payload.horaFinal,
                        niveles: {
                            connect: payload.niveles.map(o => ({ id: o })),
                        },
                    },
                }),
            });
        }
        catch (err) {
            Logger_1.default.error(err);
            return response.status(500).send({
                message: 'Error al almacenar el registro',
            });
        }
    }
    async show({ request, response }) {
        try {
            return response.send({
                message: 'Detalle del registro',
                payload: await Prisma_1.prisma.curso.findUniqueOrThrow({
                    where: {
                        id: request.param('id'),
                    },
                    include: {
                        idioma: true,
                        modalidad: true,
                        niveles: {
                            include: {
                                libros: {
                                    orderBy: [
                                        { nombre: 'asc' },
                                    ],
                                },
                            },
                        },
                    },
                }),
            });
        }
        catch (err) {
            Logger_1.default.error(err);
            return response.status(404).send({
                message: 'Registro inexistente',
            });
        }
    }
    async update({ request, response }) {
        if ((await Prisma_1.prisma.curso.count({
            where: {
                id: request.param('id'),
            },
        })) !== 1) {
            return response.status(404).send({
                message: 'Registro inexistente',
            });
        }
        const payload = await request.validate({
            schema: Validator_1.schema.create({
                nombre: Validator_1.schema.string([
                    Validator_1.rules.maxLength(255),
                    Validator_1.rules.trim(),
                ]),
                activo: Validator_1.schema.boolean(),
                horaInicial: Validator_1.schema.string([
                    Validator_1.rules.time()
                ]),
                horaFinal: Validator_1.schema.string([
                    Validator_1.rules.time()
                ]),
                filialId: Validator_1.schema.string(),
                idiomaId: Validator_1.schema.string(),
                modalidadId: Validator_1.schema.string(),
                niveles: Validator_1.schema.array([
                    Validator_1.rules.minLength(1),
                ]).members(Validator_1.schema.string()),
            }),
        });
        try {
            return response.send({
                message: 'Registro actualizado',
                payload: await Prisma_1.prisma.curso.update({
                    where: {
                        id: request.param('id'),
                    },
                    data: {
                        nombre: payload.nombre,
                        activo: payload.activo,
                        modalidad: {
                            connect: { id: payload.modalidadId },
                        },
                        idioma: {
                            connect: { id: payload.idiomaId },
                        },
                        filial: {
                            connect: { id: payload.filialId },
                        },
                        horaInicial: payload.horaInicial,
                        horaFinal: payload.horaFinal,
                        niveles: {
                            set: payload.niveles.map(o => ({ id: o })),
                        },
                    },
                }),
            });
        }
        catch (err) {
            Logger_1.default.error(err);
            return response.status(500).send({
                message: 'Error al almacenar el registro',
            });
        }
    }
    async destroy({ request, response }) {
        if ((await Prisma_1.prisma.curso.count({
            where: {
                id: request.param('id'),
            },
        })) !== 1) {
            return response.status(404).send({
                message: 'Registro inexistente',
            });
        }
        await Prisma_1.prisma.curso.update({
            where: {
                id: request.param('id'),
            },
            data: {
                niveles: {
                    set: [],
                },
            },
        });
        await Prisma_1.prisma.curso.delete({
            where: {
                id: request.param('id'),
            },
        });
        return response.send({
            message: 'Registro eliminado',
        });
    }
    async excel({ request, response }) {
        const filialId = request.input('filialId') || '';
        if (filialId == '') {
            return response.status(422).send({
                message: 'Debe seleccionar una filial',
            });
        }
        const dir = './tmp/uploads/excel';
        if (!fs.existsSync(dir)) {
            fs.mkdirSync(dir, { recursive: true });
        }
        const archivo = `cursos_${Math.floor(new Date().getTime() / 1000)}.xlsx`;
        const libro = new exceljs_1.default.Workbook();
        const hoja = libro.addWorksheet('Cursos');
        hoja.columns = [
            { key: 'idiomaNombre', header: 'Idioma', },
            { key: 'modalidadNombre', header: 'Modalidad', },
            { key: 'nombre', header: 'Nombre', },
            { key: 'horaInicial', header: 'Hora Inicial', },
            { key: 'horaFinal', header: 'Hora Final', },
            { key: 'estado', header: 'Estado', },
            { key: 'nivelesLista', header: 'Niveles', },
            { key: 'librosLista', header: 'Libros', },
        ];
        hoja.getRow(1).font = {
            bold: true,
        };
        (await Prisma_1.prisma.curso.findMany({
            where: {
                filial: {
                    id: filialId,
                },
            },
            include: {
                idioma: true,
                modalidad: true,
                niveles: {
                    include: {
                        libros: {
                            orderBy: [
                                { nombre: 'asc' },
                            ],
                        },
                    },
                },
            },
        })).forEach(item => {
            let librosCurso = [];
            item.niveles.forEach(nivel => {
                librosCurso.push(nivel.libros.reduce(function (acc, o) {
                    acc.push(o.nombre);
                    return acc;
                }, []));
            });
            const librosLista = librosCurso.flat(1).filter((value, index, array) => array.indexOf(value) === index).join(', ');
            hoja.addRow({
                idiomaNombre: item.idioma.nombre,
                modalidadNombre: item.modalidad.nombre,
                nombre: item.nombre,
                horaInicial: item.horaInicial,
                horaFinal: item.horaFinal,
                estado: item.activo ? 'EN CURSO' : 'FINALIZADO',
                nivelesLista: item.niveles.reduce(function (acc, o) {
                    acc.push(o.nombre);
                    return acc;
                }, []).join(', '),
                librosLista: librosLista,
            });
        });
        await response.header('content-type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
        await response.header('content-disposition', `attachment; filename=${archivo}`);
        await libro.xlsx.writeFile(`${dir}/${archivo}`);
        return response.download(`${dir}/${archivo}`, true, (err) => {
            if (err) {
                Logger_1.default.error(err.message);
                return response.status(500).send({
                    message: 'Error al generar el archivo',
                });
            }
            fs.unlinkSync(`${dir}/${archivo}`);
        });
    }
}
exports.default = CursosController;
//# sourceMappingURL=data:application/json;base64,