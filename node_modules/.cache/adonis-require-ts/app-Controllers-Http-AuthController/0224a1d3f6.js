"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Hash_1 = __importDefault(global[Symbol.for('ioc.use')]("Adonis/Core/Hash"));
const Validator_1 = global[Symbol.for('ioc.use')]("Adonis/Core/Validator");
const Prisma_1 = global[Symbol.for('ioc.use')]("Adonis/Addons/Prisma");
const Env_1 = __importDefault(global[Symbol.for('ioc.use')]("Adonis/Core/Env"));
const nodemailer_1 = __importDefault(require("nodemailer"));
const Config_1 = __importDefault(global[Symbol.for('ioc.use')]("Adonis/Core/Config"));
const jsonwebtoken_1 = __importDefault(require("jsonwebtoken"));
const Logger_1 = __importDefault(global[Symbol.for('ioc.use')]("Adonis/Core/Logger"));
const moment_1 = __importDefault(require("moment"));
class AuthController {
    async index({ auth, response }) {
        const registro = await Prisma_1.prisma.usuario.findUnique({
            where: {
                id: auth.user?.id,
            },
            select: {
                id: true,
                nombre: true,
                password: true,
                activo: true,
                rememberMeToken: true,
                persona: {
                    select: {
                        id: true,
                        nombre: true,
                        apellidoPaterno: true,
                        apellidoMaterno: true,
                        email: true,
                        cedula: true,
                        cedulaComplemento: true,
                        ciudad: {
                            select: {
                                id: true,
                                nombre: true,
                                codigo: true,
                            },
                        },
                        celular: true,
                        telefono: true,
                        fechaNacimiento: true,
                        contactoNombre: true,
                        contactoCelular: true,
                        contactoTelefono: true,
                        parentesco: {
                            select: {
                                id: true,
                                nombre: true,
                            },
                        },
                        gestionDiploma: true,
                        gestionEgreso: true,
                        grado: true,
                        nacionalidad: true,
                        destinoActual: true,
                        direccion: true,
                        carnetCossmil: true,
                        carnetMilitar: true,
                        contactoCarnetCossmil: true,
                        contactoCarnetMilitar: true,
                    },
                },
                rol: {
                    select: {
                        id: true,
                        nombre: true,
                        modulos: {
                            select: {
                                id: true,
                                nombre: true,
                            },
                        },
                    },
                },
                filial: {
                    select: {
                        id: true,
                        nombre: true,
                        codigo: true,
                        localidad: true,
                        direccion: true,
                        celular: true,
                        telefono: true,
                        ciudad: {
                            select: {
                                id: true,
                                nombre: true,
                                codigo: true,
                            },
                        },
                    },
                },
            },
        });
        return response.send({
            message: 'Usuario autenticado',
            payload: registro,
        });
    }
    async store({ request, response }) {
        const payload = await request.validate({
            schema: Validator_1.schema.create({
                nombre: Validator_1.schema.string([
                    Validator_1.rules.maxLength(255),
                    Validator_1.rules.trim(),
                ]),
                password: Validator_1.schema.string([
                    Validator_1.rules.maxLength(180),
                    Validator_1.rules.trim(),
                ]),
            }),
        });
        const usuario = await Prisma_1.prisma.usuario.findUnique({
            where: {
                nombre: payload.nombre,
            },
        });
        if (usuario) {
            if (usuario.activo) {
                if (!(await Hash_1.default.verify(usuario.password, payload.password))) {
                    return response.status(422).send({
                        message: 'Acceso denegado',
                        errors: {
                            password: ['Credenciales incorrectas'],
                        },
                    });
                }
                try {
                    const token = jsonwebtoken_1.default.sign({ id: usuario.id.toString(), nombre: usuario.nombre }, Config_1.default.get('app.appKey'), {
                        expiresIn: '365 days',
                    });
                    return response.send({
                        message: 'Bienvenido',
                        payload: {
                            ...{
                                type: 'Bearer',
                                token: token
                            },
                            usuario: await Prisma_1.prisma.usuario.update({
                                where: {
                                    id: usuario.id,
                                },
                                data: {
                                    rememberMeToken: token,
                                    resetPasswordToken: null,
                                    resetPasswordLimite: null,
                                },
                                select: {
                                    id: true,
                                    nombre: true,
                                    password: true,
                                    activo: true,
                                    rememberMeToken: true,
                                    persona: {
                                        select: {
                                            id: true,
                                            nombre: true,
                                            apellidoPaterno: true,
                                            apellidoMaterno: true,
                                            email: true,
                                            cedula: true,
                                            cedulaComplemento: true,
                                            ciudad: {
                                                select: {
                                                    id: true,
                                                    nombre: true,
                                                    codigo: true,
                                                },
                                            },
                                            celular: true,
                                            telefono: true,
                                            fechaNacimiento: true,
                                            contactoNombre: true,
                                            contactoCelular: true,
                                            contactoTelefono: true,
                                            parentesco: {
                                                select: {
                                                    id: true,
                                                    nombre: true,
                                                },
                                            },
                                            gestionDiploma: true,
                                            gestionEgreso: true,
                                            grado: true,
                                            nacionalidad: true,
                                            destinoActual: true,
                                            direccion: true,
                                            carnetCossmil: true,
                                            carnetMilitar: true,
                                            contactoCarnetCossmil: true,
                                            contactoCarnetMilitar: true,
                                        },
                                    },
                                    rol: {
                                        select: {
                                            id: true,
                                            nombre: true,
                                            modulos: {
                                                select: {
                                                    id: true,
                                                    nombre: true,
                                                },
                                            },
                                        },
                                    },
                                    filial: {
                                        select: {
                                            id: true,
                                            nombre: true,
                                            codigo: true,
                                            localidad: true,
                                            direccion: true,
                                            celular: true,
                                            telefono: true,
                                            ciudad: {
                                                select: {
                                                    id: true,
                                                    nombre: true,
                                                    codigo: true,
                                                },
                                            },
                                        },
                                    },
                                },
                            }),
                        }
                    });
                }
                catch (err) {
                    return response.status(422).send({
                        message: 'Acceso denegado',
                        errors: {
                            password: ['Credenciales incorrectas'],
                        },
                    });
                }
            }
            else {
                return response.status(422).send({
                    message: 'Acceso denegado',
                    errors: {
                        nombre: ['Usuario inactivo'],
                    },
                });
            }
        }
        else {
            return response.status(422).send({
                message: 'Acceso denegado',
                errors: {
                    nombre: ['Usuario inexistente'],
                },
            });
        }
    }
    async show({}) { }
    async update({ auth, request, response }) {
        const payload = await request.validate({
            schema: Validator_1.schema.create({
                passwordAnterior: Validator_1.schema.string([
                    Validator_1.rules.maxLength(180),
                    Validator_1.rules.trim(),
                ]),
                password: Validator_1.schema.string([
                    Validator_1.rules.maxLength(180),
                    Validator_1.rules.trim(),
                    Validator_1.rules.confirmed('passwordConfirmacion'),
                ]),
            }),
        });
        if (auth.user) {
            if (auth.user.id == request.param('id')) {
                if ((await Hash_1.default.verify(auth.user.password, payload.passwordAnterior))) {
                    await Prisma_1.prisma.usuario.update({
                        where: {
                            id: auth.user.id,
                        },
                        data: {
                            password: await Hash_1.default.make(payload.password),
                            resetPasswordToken: null,
                            resetPasswordLimite: null,
                        },
                    });
                    return response.send({
                        message: 'Contraseña modificada',
                    });
                }
                else {
                    return response.status(422).send({
                        message: 'Error',
                        errors: {
                            passwordAnterior: ['Contraseña anterior incorrecta'],
                        },
                    });
                }
            }
            else {
                return response.status(401).send({
                    message: 'Acceso denegado',
                });
            }
        }
        else {
            return response.status(401).send({
                message: 'Acceso denegado',
            });
        }
    }
    async destroy({ auth, response }) {
        if (auth.user) {
            await Prisma_1.prisma.usuario.update({
                where: {
                    id: auth.user?.id,
                },
                data: {
                    rememberMeToken: null,
                },
            });
            return response.send({
                message: 'Sesión finalizada',
            });
        }
        else {
            return response.status(422).send({
                message: 'Debe iniciar sesión',
            });
        }
    }
    async resetPasswordToken({ request, response }) {
        const payload = await request.validate({
            schema: Validator_1.schema.create({
                nombre: Validator_1.schema.string([
                    Validator_1.rules.maxLength(255),
                    Validator_1.rules.trim(),
                ]),
            }),
        });
        const registro = await Prisma_1.prisma.usuario.findFirst({
            where: {
                nombre: payload.nombre,
            },
            include: {
                persona: true,
            },
        });
        if (!registro) {
            return response.status(422).send({
                message: 'Acceso denegado',
                errors: {
                    nombre: ['Usuario inexistente'],
                },
            });
        }
        if (!registro.activo) {
            return response.status(422).send({
                message: 'Acceso denegado',
                errors: {
                    nombre: ['Usuario inactivo'],
                },
            });
        }
        if (!registro.persona.email) {
            return response.status(422).send({
                message: 'Acceso denegado',
                errors: {
                    nombre: ['El usuario no cuenta con un email válido'],
                },
            });
        }
        try {
            const token = Math.floor(Math.random() * (999999 - 100000) + 100000);
            const transporter = nodemailer_1.default.createTransport({
                service: 'gmail',
                host: 'smtp.gmail.com',
                port: 587,
                secure: false,
                auth: {
                    user: Env_1.default.get('GMAIL_USUARIO'),
                    pass: Env_1.default.get('GMAIL_KEY'),
                },
            });
            await transporter.sendMail({
                from: Env_1.default.get('GMAIL_USUARIO'),
                to: registro.persona.email,
                subject: 'Recuperación de contraseña EIE',
                text: `Para recuperar su contraseña debe usar el siguiente enlace: ${Env_1.default.get('FRONTEND_URL')}/recuperacion?q=${token}&u=${payload.nombre}\nEl enlace expira en 30 minutos.`,
                html: `<p>Para recuperar su contraseña debe usar <a href="${Env_1.default.get('FRONTEND_URL')}/recuperacion?q=${token}&u=${payload.nombre}">ESTE ENLACE</a></p><p>El enlace expira en 30 minutos</p>`,
                amp: `<!doctype html>
          <html ⚡4email>
            <head>
              <meta charset="utf-8">
              <style amp4email-boilerplate>body{visibility:hidden}</style>
              <script async src="https://cdn.ampproject.org/v0.js"></script>
              <script async custom-element="amp-anim" src="https://cdn.ampproject.org/v0/amp-anim-0.1.js"></script>
            </head>
            <body>
              <p>Para recuperar su contraseña debe usar <a href="${Env_1.default.get('FRONTEND_URL')}/recuperacion?q=${token}&u=${payload.nombre}">ESTE ENLACE</a></p>
              <p>El enlace expira en 30 minutos</p>
            </body>
          </html>`
            });
            await Prisma_1.prisma.usuario.update({
                where: {
                    id: registro.id,
                },
                data: {
                    resetPasswordToken: token,
                    resetPasswordLimite: (0, moment_1.default)().add(30, 'minutes').toISOString(),
                },
            });
            return response.send({
                message: 'Revise su email para recuperar la contraseña',
            });
        }
        catch (err) {
            Logger_1.default.error(err);
            return {
                error: true
            };
        }
    }
    async resetPassword({ request, response }) {
        const payload = await request.validate({
            schema: Validator_1.schema.create({
                nombre: Validator_1.schema.string([
                    Validator_1.rules.maxLength(255),
                    Validator_1.rules.trim(),
                ]),
                resetPasswordToken: Validator_1.schema.number([
                    Validator_1.rules.range(100000, 999999),
                ]),
                password: Validator_1.schema.string([
                    Validator_1.rules.maxLength(180),
                    Validator_1.rules.trim(),
                    Validator_1.rules.confirmed('passwordConfirmacion'),
                ]),
            }),
        });
        const registro = await Prisma_1.prisma.usuario.findFirst({
            where: {
                nombre: payload.nombre,
            },
            include: {
                persona: true,
            },
        });
        if (!registro) {
            return response.status(422).send({
                message: 'Usuario inexistente',
            });
        }
        if (!registro.activo) {
            return response.status(422).send({
                message: 'Usuario inactivo',
            });
        }
        if (registro.resetPasswordToken != payload.resetPasswordToken) {
            return response.status(422).send({
                message: 'Acceso denegado',
                errors: {
                    password: ['Código incorrecto'],
                },
            });
        }
        if (registro.resetPasswordLimite) {
            if ((0, moment_1.default)().diff((0, moment_1.default)(registro.resetPasswordLimite.toISOString(), moment_1.default.ISO_8601), 'minutes') > 30) {
                return response.status(422).send({
                    message: 'Acceso denegado',
                    errors: {
                        password: ['Código expirado'],
                    },
                });
            }
        }
        const token = jsonwebtoken_1.default.sign({ id: registro.id.toString(), nombre: registro.nombre }, Config_1.default.get('app.appKey'), {
            expiresIn: '365 days',
        });
        return response.send({
            message: 'Contraseña modificada',
            payload: {
                ...{
                    type: 'Bearer',
                    token: token
                },
                usuario: await Prisma_1.prisma.usuario.update({
                    where: {
                        id: registro.id,
                    },
                    data: {
                        password: await Hash_1.default.make(payload.password),
                        rememberMeToken: token,
                        resetPasswordToken: null,
                        resetPasswordLimite: null,
                    },
                    select: {
                        id: true,
                        nombre: true,
                        password: true,
                        activo: true,
                        rememberMeToken: true,
                        persona: {
                            select: {
                                id: true,
                                nombre: true,
                                apellidoPaterno: true,
                                apellidoMaterno: true,
                                email: true,
                                cedula: true,
                                cedulaComplemento: true,
                                ciudad: {
                                    select: {
                                        id: true,
                                        nombre: true,
                                        codigo: true,
                                    },
                                },
                                celular: true,
                                telefono: true,
                                fechaNacimiento: true,
                                contactoNombre: true,
                                contactoCelular: true,
                                contactoTelefono: true,
                                parentesco: {
                                    select: {
                                        id: true,
                                        nombre: true,
                                    },
                                },
                                gestionDiploma: true,
                                gestionEgreso: true,
                                grado: true,
                                nacionalidad: true,
                                destinoActual: true,
                                direccion: true,
                                carnetCossmil: true,
                                carnetMilitar: true,
                                contactoCarnetCossmil: true,
                                contactoCarnetMilitar: true,
                            },
                        },
                        rol: {
                            select: {
                                id: true,
                                nombre: true,
                                modulos: {
                                    select: {
                                        id: true,
                                        nombre: true,
                                    },
                                },
                            },
                        },
                        filial: {
                            select: {
                                id: true,
                                nombre: true,
                                codigo: true,
                                localidad: true,
                                direccion: true,
                                celular: true,
                                telefono: true,
                                ciudad: {
                                    select: {
                                        id: true,
                                        nombre: true,
                                        codigo: true,
                                    },
                                },
                            },
                        },
                    },
                }),
            }
        });
    }
}
exports.default = AuthController;
//# sourceMappingURL=data:application/json;base64,